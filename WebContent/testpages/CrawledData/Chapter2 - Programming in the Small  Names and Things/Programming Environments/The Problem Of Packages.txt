Every class in Java is contained in something called a package. Classes that are not explicitly put into a package are in the "default" package. Almost all the examples in this textbook are in the default package, and I will not even discuss packages in any depth until Section 4.5. However, some IDEs force you to pay attention to packages.

In fact, the use of the default package is discouraged, according to official Java style guidelines. Nevertheless, I have chosen to use it, since it seems easier for beginning programmers to avoid the whole issue of packages, at least at first. If Eclipse or NetBeans tries to put a class into a package, you can delete the package name from the class-creation dialog to get it to use the default package instead. But if you do create a class in a package, the source code starts with a line that specifies which package the class is in. For example, if the class is in a package named test.pkg, then the first line of the source code will be

package test.pkg;
In an IDE, this will not cause any problem unless the program you are writing depends on TextIO. A class that is in a non-default package cannot use a class from the default package. To make TextIO available to such a class, you can move TextIO to a named, non-default package. This means that the source code file TextIO.java has to be modified to specify the package: A package statement like the one shown above must be added to the very beginning of the file, with the appropriate package name. (The IDE might do this for you, if you drag TextIO.java from the default package into a non-default package.) If you add TextIO to the same package as the class that uses it, then TextIO will be automatically available to that class. If TextIO is in a different named package, you have to add an "import" statement to the other class to make TextIO available to it. For example, if TextIO is in the package textio, add the statement

import textio.TextIO;
to the top of the other source code file, just after its own package declaration.

By the way, if you use packages in a command-line environment, other complications arise. For example, if a class is in a package named test.pkg, then the source code file must be in a subdirectory named "pkg" inside a directory named "test" that is in turn inside your main Java working directory. Nevertheless, when you compile or execute the program, you should be in the main directory, not in a subdirectory. When you compile the source code file, you have to include the name of the directory in the command: Use "javac test/pkg/ClassName.java" on Linux or Mac OS, or "javac test\pkg\ClassName.java" on Windows. The command for executing the program is then "java test.pkg.ClassName", with a period separating the package name from the class name. However, you will not need to worry about any of that when working with almost all of the examples in this book.


