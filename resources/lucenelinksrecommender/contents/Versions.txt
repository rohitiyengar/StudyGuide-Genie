https://en.wikibooks.org/wiki/Java_Programming/History#Versions
Unlike C and C++, Java's growth is pretty recent. Here, we'd quickly go through the development paths that Java took with age.Development of Java over the years. From version 1.0 to version 1.7, Java has displayed a steady growth.Initial Release (versions 1.0 and 1.1)[edit]Introduced in 1996 for the Solaris, Windows, Mac OS Classic and Linux, Java was initially released as the Java Development Kit 1.0 (JDK 1.0). This included the Java runtime (the virtual machine and the class libraries), and the development tools (e.g., the Java compiler). Later, Sun also provided a runtime-only package, called the Java Runtime Environment (JRE). The first name stuck, however, so usually people refer to a particular version of Java by its JDK version (e.g., JDK 1.0).Java 2 (version 1.2)[edit]Introduced in 1998 as a quick fix to the former versions, version 1.2 was the start of a new beginning for Java. The JDKs of version 1.2 and later versions are often called Java 2 as well. For example, the official name of JDK 1.4 is The Java(TM) 2 Platform, Standard Edition version 1.4.Major changes include: Rewrite the event handling (add Event Listeners) Change Thread synchronizations Introduction of the JIT-Just in time compilersKestrel (Java 1.3)[edit]Released in 8 May 2000. The most notable changes were:HotSpot JVM included (the HotSpot JVM was first released in April, 1999 for the J2SE 1.2 JVM) RMI was modified to support optional compatibility with CORBA JavaSound Java Naming and Directory Interface (JNDI) included in core libraries (previously available as an extension) Java Platform Debugger Architecture (JPDA) Synthetic proxy classesMerlin (Java 1.4)[edit]Released in 6 February 2002, Java 1.4 has improved programmer productivity by expanding language features and available APIs:Assertion Regular Expression XML processing Cryptography and Secure Socket Layer (SSL) Non-blocking I/O (NIO) LoggingTiger (version 1.5.0; Java SE 5)[edit]Released in September 2004Major changes include: Generics - Provides compile-time type safety for collections :and eliminates the drudgery of casting. Autoboxing/unboxing - Eliminates the drudgery of manual conversion between primitive types (such as int) and wrapper types (such as Integer). Enhanced for - Shorten the for loop with Collections use. Static imports - Lets you import all the static part of a class. Annotation/Metadata - Enabling tools to generate code and deployment descriptors from annotations in the source code. This leads to a "declarative" programming style where the programmer says what should be done and tools emit the code to do it. Annotations can be inspected through source parsing or by using the additional reflection APIs added in Java 5. JVM Improvements - Most of the run time library is now mapped into memory as a memory image, as opposed to being loaded from a series of class files. Large portion of the runtime libraries will now be shared among multiple JVM instances.Mustang (version 1.6.0; Java SE 6)[edit]Released on 11 December 2006.[4]What's New in Java SE 6:Web Services - First-class support for writing XML web service client applications.Scripting - You can now mix in JavaScript technology source code, useful for prototyping. Also useful when you have teams with a variety of skill sets. More advanced developers can plug in their own scripting engines and mix their favorite scripting language in with Java code as they see fit.Database - No more need to find and configure your own JDBC database when developing a database application. Developers will also get the updated JDBC 4.0, a well-used API with many important improvements, such as special support for XML as an SQL datatype and better integration of Binary Large OBjects (BLOBs) and Character Large OBjects (CLOBs) into the APIs.More Desktop APIs - GUI developers get a large number of new tricks to play like the ever popular yet newly incorporated SwingWorker utility to help you with threading in GUI apps, JTable sorting and filtering, and a new facility for quick splash screens to quiet impatient users.Monitoring and Management - The really big deal here is that you don't need to do anything special to the startup to be able to attach on demand with any of the monitoring and management tools in the Java SE platform.Compiler Access - Really aimed at people who create tools for Java development and for frameworks like JavaServer Pages (JSP) or Personal Home Page construction kit (PHP) engines that need to generate a bunch of classes on demand, the compiler API opens up programmatic access to javac for in-process compilation of dynamically generated Java code. The compiler API is not directly intended for the everyday developer, but for those of you deafened by your screaming inner geek, roll up your sleeves and give it a try. And the rest of us will happily benefit from the tools and the improved Java frameworks that use this.Pluggable Annotations allows programmer to write annotation processor so that it can analyse your code semantically before javac compiles. For example, you could write an annotation processor that verifies whether your program obeys naming conventions.Desktop Deployment - At long last, Java SE 6 unifies the Java Plug-in technology and Java WebStart engines, which just makes sense. Installation of the Java WebStart application got a much needed makeover.Security - Java SE 6 has simplified the job of its security administrators by providing various new ways to access platform-native security services, such as native Public Key Infrastructure (PKI) and cryptographic services on Microsoft Windows for secure authentication and communication, Java Generic Security Services (Java GSS) and Kerberos services for authentication, and access to LDAP servers for authenticating users.The -lities: Quality, Compatibility, Stability - Bug fixes ...Dolphin (version 1.7.0; Java SE 7)[edit]Released on 28 July 2011.Feature additions for Java 7 include:[5]JVM support for dynamic languages, following the prototyping work currently done on the Multi Language Virtual Machine Compressed 64-bit pointers[6] Available in Java 6 with -XX:+UseCompressedOops Small language changes (grouped under a project named Coin):[7]Strings in switch[8] Automatic resource management in try-statement[9] Improved type inference for generic instance creation[10] Simplified varargs method declaration[11] Binary integer literals[12] Allowing underscores in numeric literals[13] Catching multiple exception types and rethrowing exceptions with improved type checking[14]Concurrency utilities under JSR 166[15] New file I/O library to enhance platform independence and add support for metadata and symbolic links. The new packages are java.nio.file and java.nio.file.attribute[16][17] Library-level support for Elliptic curve cryptography algorithms An XRender pipeline for Java 2D, which improves handling of features specific to modern GPUs New platform APIs for the graphics features originally planned for release in Java version 6u10 Enhanced library-level support for new network protocols, including SCTP and Sockets Direct Protocol Upstream updates to XML and UnicodeLambda (Java's implementation of lambda functions), Jigsaw (Java's implementation of modules), and part of Coin were dropped from Java 7. Java 8 will be released with the remaining features in summer 2013.[18]